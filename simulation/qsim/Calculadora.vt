// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/06/2018 16:14:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Calculadore
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Calculadore_vlg_sample_tst(
	CLOCK_50,
	GPIO_1,
	SW,
	sampler_tx
);
input  CLOCK_50;
input [35:0] GPIO_1;
input [0:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK_50 or GPIO_1 or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Calculadore_vlg_check_tst (
	GPIO_1,
	HEX0,
	HEX1,
	HEX2,
	HEX4,
	HEX6,
	LEDG,
	LEDR,
	sampler_rx
);
input [35:0] GPIO_1;
input [6:0] HEX0;
input [6:0] HEX1;
input [6:0] HEX2;
input [6:0] HEX4;
input [6:0] HEX6;
input [8:0] LEDG;
input [17:0] LEDR;
input sampler_rx;

reg [35:0] GPIO_1_expected;
reg [6:0] HEX0_expected;
reg [6:0] HEX1_expected;
reg [6:0] HEX2_expected;
reg [6:0] HEX4_expected;
reg [6:0] HEX6_expected;
reg [8:0] LEDG_expected;
reg [17:0] LEDR_expected;

reg [35:0] GPIO_1_prev;
reg [6:0] HEX0_prev;
reg [6:0] HEX1_prev;
reg [6:0] HEX2_prev;
reg [6:0] HEX4_prev;
reg [6:0] HEX6_prev;
reg [8:0] LEDG_prev;
reg [17:0] LEDR_prev;

reg [35:0] GPIO_1_expected_prev;
reg [6:0] HEX0_expected_prev;
reg [6:0] HEX1_expected_prev;
reg [6:0] HEX2_expected_prev;
reg [6:0] HEX4_expected_prev;
reg [6:0] HEX6_expected_prev;
reg [8:0] LEDG_expected_prev;
reg [17:0] LEDR_expected_prev;

reg [35:0] last_GPIO_1_exp;
reg [6:0] last_HEX0_exp;
reg [6:0] last_HEX1_exp;
reg [6:0] last_HEX2_exp;
reg [6:0] last_HEX4_exp;
reg [6:0] last_HEX6_exp;
reg [8:0] last_LEDG_exp;
reg [17:0] last_LEDR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	GPIO_1_prev = GPIO_1;
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	HEX2_prev = HEX2;
	HEX4_prev = HEX4;
	HEX6_prev = HEX6;
	LEDG_prev = LEDG;
	LEDR_prev = LEDR;
end

// update expected /o prevs

always @(trigger)
begin
	GPIO_1_expected_prev = GPIO_1_expected;
	HEX0_expected_prev = HEX0_expected;
	HEX1_expected_prev = HEX1_expected;
	HEX2_expected_prev = HEX2_expected;
	HEX4_expected_prev = HEX4_expected;
	HEX6_expected_prev = HEX6_expected;
	LEDG_expected_prev = LEDG_expected;
	LEDR_expected_prev = LEDR_expected;
end


// expected HEX0[ 6 ]
initial
begin
	HEX0_expected[6] = 1'bX;
end 
// expected HEX0[ 5 ]
initial
begin
	HEX0_expected[5] = 1'bX;
end 
// expected HEX0[ 4 ]
initial
begin
	HEX0_expected[4] = 1'bX;
end 
// expected HEX0[ 3 ]
initial
begin
	HEX0_expected[3] = 1'bX;
end 
// expected HEX0[ 2 ]
initial
begin
	HEX0_expected[2] = 1'bX;
end 
// expected HEX0[ 1 ]
initial
begin
	HEX0_expected[1] = 1'bX;
end 
// expected HEX0[ 0 ]
initial
begin
	HEX0_expected[0] = 1'bX;
end 
// expected HEX1[ 6 ]
initial
begin
	HEX1_expected[6] = 1'bX;
end 
// expected HEX1[ 5 ]
initial
begin
	HEX1_expected[5] = 1'bX;
end 
// expected HEX1[ 4 ]
initial
begin
	HEX1_expected[4] = 1'bX;
end 
// expected HEX1[ 3 ]
initial
begin
	HEX1_expected[3] = 1'bX;
end 
// expected HEX1[ 2 ]
initial
begin
	HEX1_expected[2] = 1'bX;
end 
// expected HEX1[ 1 ]
initial
begin
	HEX1_expected[1] = 1'bX;
end 
// expected HEX1[ 0 ]
initial
begin
	HEX1_expected[0] = 1'bX;
end 
// expected HEX2[ 6 ]
initial
begin
	HEX2_expected[6] = 1'bX;
end 
// expected HEX2[ 5 ]
initial
begin
	HEX2_expected[5] = 1'bX;
end 
// expected HEX2[ 4 ]
initial
begin
	HEX2_expected[4] = 1'bX;
end 
// expected HEX2[ 3 ]
initial
begin
	HEX2_expected[3] = 1'bX;
end 
// expected HEX2[ 2 ]
initial
begin
	HEX2_expected[2] = 1'bX;
end 
// expected HEX2[ 1 ]
initial
begin
	HEX2_expected[1] = 1'bX;
end 
// expected HEX2[ 0 ]
initial
begin
	HEX2_expected[0] = 1'bX;
end 
// expected HEX4[ 6 ]
initial
begin
	HEX4_expected[6] = 1'bX;
end 
// expected HEX4[ 5 ]
initial
begin
	HEX4_expected[5] = 1'bX;
end 
// expected HEX4[ 4 ]
initial
begin
	HEX4_expected[4] = 1'bX;
end 
// expected HEX4[ 3 ]
initial
begin
	HEX4_expected[3] = 1'bX;
end 
// expected HEX4[ 2 ]
initial
begin
	HEX4_expected[2] = 1'bX;
end 
// expected HEX4[ 1 ]
initial
begin
	HEX4_expected[1] = 1'bX;
end 
// expected HEX4[ 0 ]
initial
begin
	HEX4_expected[0] = 1'bX;
end 
// expected HEX6[ 6 ]
initial
begin
	HEX6_expected[6] = 1'bX;
end 
// expected HEX6[ 5 ]
initial
begin
	HEX6_expected[5] = 1'bX;
end 
// expected HEX6[ 4 ]
initial
begin
	HEX6_expected[4] = 1'bX;
end 
// expected HEX6[ 3 ]
initial
begin
	HEX6_expected[3] = 1'bX;
end 
// expected HEX6[ 2 ]
initial
begin
	HEX6_expected[2] = 1'bX;
end 
// expected HEX6[ 1 ]
initial
begin
	HEX6_expected[1] = 1'bX;
end 
// expected HEX6[ 0 ]
initial
begin
	HEX6_expected[0] = 1'bX;
end 
// expected LEDG[ 8 ]
initial
begin
	LEDG_expected[8] = 1'bX;
end 
// expected LEDG[ 7 ]
initial
begin
	LEDG_expected[7] = 1'bX;
end 
// expected LEDG[ 6 ]
initial
begin
	LEDG_expected[6] = 1'bX;
end 
// expected LEDG[ 5 ]
initial
begin
	LEDG_expected[5] = 1'bX;
end 
// expected LEDG[ 4 ]
initial
begin
	LEDG_expected[4] = 1'bX;
end 
// expected LEDG[ 3 ]
initial
begin
	LEDG_expected[3] = 1'bX;
end 
// expected LEDG[ 2 ]
initial
begin
	LEDG_expected[2] = 1'bX;
end 
// expected LEDG[ 1 ]
initial
begin
	LEDG_expected[1] = 1'bX;
end 
// expected LEDG[ 0 ]
initial
begin
	LEDG_expected[0] = 1'bX;
end 
// expected LEDR[ 17 ]
initial
begin
	LEDR_expected[17] = 1'bX;
end 
// expected LEDR[ 16 ]
initial
begin
	LEDR_expected[16] = 1'bX;
end 
// expected LEDR[ 15 ]
initial
begin
	LEDR_expected[15] = 1'bX;
end 
// expected LEDR[ 14 ]
initial
begin
	LEDR_expected[14] = 1'bX;
end 
// expected LEDR[ 13 ]
initial
begin
	LEDR_expected[13] = 1'bX;
end 
// expected LEDR[ 12 ]
initial
begin
	LEDR_expected[12] = 1'bX;
end 
// expected LEDR[ 11 ]
initial
begin
	LEDR_expected[11] = 1'bX;
end 
// expected LEDR[ 10 ]
initial
begin
	LEDR_expected[10] = 1'bX;
end 
// expected LEDR[ 9 ]
initial
begin
	LEDR_expected[9] = 1'bX;
end 
// expected LEDR[ 8 ]
initial
begin
	LEDR_expected[8] = 1'bX;
end 
// expected LEDR[ 7 ]
initial
begin
	LEDR_expected[7] = 1'bX;
end 
// expected LEDR[ 6 ]
initial
begin
	LEDR_expected[6] = 1'bX;
end 
// expected LEDR[ 5 ]
initial
begin
	LEDR_expected[5] = 1'bX;
end 
// expected LEDR[ 4 ]
initial
begin
	LEDR_expected[4] = 1'bX;
end 
// expected LEDR[ 3 ]
initial
begin
	LEDR_expected[3] = 1'bX;
end 
// expected LEDR[ 2 ]
initial
begin
	LEDR_expected[2] = 1'bX;
end 
// expected LEDR[ 1 ]
initial
begin
	LEDR_expected[1] = 1'bX;
end 
// expected LEDR[ 0 ]
initial
begin
	LEDR_expected[0] = 1'bX;
end 
// generate trigger
always @(GPIO_1_expected or GPIO_1 or HEX0_expected or HEX0 or HEX1_expected or HEX1 or HEX2_expected or HEX2 or HEX4_expected or HEX4 or HEX6_expected or HEX6 or LEDG_expected or LEDG or LEDR_expected or LEDR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected GPIO_1 = %b | expected HEX0 = %b | expected HEX1 = %b | expected HEX2 = %b | expected HEX4 = %b | expected HEX6 = %b | expected LEDG = %b | expected LEDR = %b | ",GPIO_1_expected_prev,HEX0_expected_prev,HEX1_expected_prev,HEX2_expected_prev,HEX4_expected_prev,HEX6_expected_prev,LEDG_expected_prev,LEDR_expected_prev);
	$display("| real GPIO_1 = %b | real HEX0 = %b | real HEX1 = %b | real HEX2 = %b | real HEX4 = %b | real HEX6 = %b | real LEDG = %b | real LEDR = %b | ",GPIO_1_prev,HEX0_prev,HEX1_prev,HEX2_prev,HEX4_prev,HEX6_prev,LEDG_prev,LEDR_prev);
`endif
	if (
		( GPIO_1_expected_prev[0] !== 1'bx ) && ( GPIO_1_prev[0] !== GPIO_1_expected_prev[0] )
		&& ((GPIO_1_expected_prev[0] !== last_GPIO_1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[0] = GPIO_1_expected_prev[0];
	end
	if (
		( GPIO_1_expected_prev[1] !== 1'bx ) && ( GPIO_1_prev[1] !== GPIO_1_expected_prev[1] )
		&& ((GPIO_1_expected_prev[1] !== last_GPIO_1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[1] = GPIO_1_expected_prev[1];
	end
	if (
		( GPIO_1_expected_prev[2] !== 1'bx ) && ( GPIO_1_prev[2] !== GPIO_1_expected_prev[2] )
		&& ((GPIO_1_expected_prev[2] !== last_GPIO_1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[2] = GPIO_1_expected_prev[2];
	end
	if (
		( GPIO_1_expected_prev[3] !== 1'bx ) && ( GPIO_1_prev[3] !== GPIO_1_expected_prev[3] )
		&& ((GPIO_1_expected_prev[3] !== last_GPIO_1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[3] = GPIO_1_expected_prev[3];
	end
	if (
		( GPIO_1_expected_prev[4] !== 1'bx ) && ( GPIO_1_prev[4] !== GPIO_1_expected_prev[4] )
		&& ((GPIO_1_expected_prev[4] !== last_GPIO_1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[4] = GPIO_1_expected_prev[4];
	end
	if (
		( GPIO_1_expected_prev[5] !== 1'bx ) && ( GPIO_1_prev[5] !== GPIO_1_expected_prev[5] )
		&& ((GPIO_1_expected_prev[5] !== last_GPIO_1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[5] = GPIO_1_expected_prev[5];
	end
	if (
		( GPIO_1_expected_prev[6] !== 1'bx ) && ( GPIO_1_prev[6] !== GPIO_1_expected_prev[6] )
		&& ((GPIO_1_expected_prev[6] !== last_GPIO_1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[6] = GPIO_1_expected_prev[6];
	end
	if (
		( GPIO_1_expected_prev[7] !== 1'bx ) && ( GPIO_1_prev[7] !== GPIO_1_expected_prev[7] )
		&& ((GPIO_1_expected_prev[7] !== last_GPIO_1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[7] = GPIO_1_expected_prev[7];
	end
	if (
		( GPIO_1_expected_prev[8] !== 1'bx ) && ( GPIO_1_prev[8] !== GPIO_1_expected_prev[8] )
		&& ((GPIO_1_expected_prev[8] !== last_GPIO_1_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[8] = GPIO_1_expected_prev[8];
	end
	if (
		( GPIO_1_expected_prev[9] !== 1'bx ) && ( GPIO_1_prev[9] !== GPIO_1_expected_prev[9] )
		&& ((GPIO_1_expected_prev[9] !== last_GPIO_1_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[9] = GPIO_1_expected_prev[9];
	end
	if (
		( GPIO_1_expected_prev[10] !== 1'bx ) && ( GPIO_1_prev[10] !== GPIO_1_expected_prev[10] )
		&& ((GPIO_1_expected_prev[10] !== last_GPIO_1_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[10] = GPIO_1_expected_prev[10];
	end
	if (
		( GPIO_1_expected_prev[11] !== 1'bx ) && ( GPIO_1_prev[11] !== GPIO_1_expected_prev[11] )
		&& ((GPIO_1_expected_prev[11] !== last_GPIO_1_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[11] = GPIO_1_expected_prev[11];
	end
	if (
		( GPIO_1_expected_prev[12] !== 1'bx ) && ( GPIO_1_prev[12] !== GPIO_1_expected_prev[12] )
		&& ((GPIO_1_expected_prev[12] !== last_GPIO_1_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[12] = GPIO_1_expected_prev[12];
	end
	if (
		( GPIO_1_expected_prev[13] !== 1'bx ) && ( GPIO_1_prev[13] !== GPIO_1_expected_prev[13] )
		&& ((GPIO_1_expected_prev[13] !== last_GPIO_1_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[13] = GPIO_1_expected_prev[13];
	end
	if (
		( GPIO_1_expected_prev[14] !== 1'bx ) && ( GPIO_1_prev[14] !== GPIO_1_expected_prev[14] )
		&& ((GPIO_1_expected_prev[14] !== last_GPIO_1_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[14] = GPIO_1_expected_prev[14];
	end
	if (
		( GPIO_1_expected_prev[15] !== 1'bx ) && ( GPIO_1_prev[15] !== GPIO_1_expected_prev[15] )
		&& ((GPIO_1_expected_prev[15] !== last_GPIO_1_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[15] = GPIO_1_expected_prev[15];
	end
	if (
		( GPIO_1_expected_prev[16] !== 1'bx ) && ( GPIO_1_prev[16] !== GPIO_1_expected_prev[16] )
		&& ((GPIO_1_expected_prev[16] !== last_GPIO_1_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[16] = GPIO_1_expected_prev[16];
	end
	if (
		( GPIO_1_expected_prev[17] !== 1'bx ) && ( GPIO_1_prev[17] !== GPIO_1_expected_prev[17] )
		&& ((GPIO_1_expected_prev[17] !== last_GPIO_1_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[17] = GPIO_1_expected_prev[17];
	end
	if (
		( GPIO_1_expected_prev[18] !== 1'bx ) && ( GPIO_1_prev[18] !== GPIO_1_expected_prev[18] )
		&& ((GPIO_1_expected_prev[18] !== last_GPIO_1_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[18] = GPIO_1_expected_prev[18];
	end
	if (
		( GPIO_1_expected_prev[19] !== 1'bx ) && ( GPIO_1_prev[19] !== GPIO_1_expected_prev[19] )
		&& ((GPIO_1_expected_prev[19] !== last_GPIO_1_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[19] = GPIO_1_expected_prev[19];
	end
	if (
		( GPIO_1_expected_prev[20] !== 1'bx ) && ( GPIO_1_prev[20] !== GPIO_1_expected_prev[20] )
		&& ((GPIO_1_expected_prev[20] !== last_GPIO_1_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[20] = GPIO_1_expected_prev[20];
	end
	if (
		( GPIO_1_expected_prev[21] !== 1'bx ) && ( GPIO_1_prev[21] !== GPIO_1_expected_prev[21] )
		&& ((GPIO_1_expected_prev[21] !== last_GPIO_1_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[21] = GPIO_1_expected_prev[21];
	end
	if (
		( GPIO_1_expected_prev[22] !== 1'bx ) && ( GPIO_1_prev[22] !== GPIO_1_expected_prev[22] )
		&& ((GPIO_1_expected_prev[22] !== last_GPIO_1_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[22] = GPIO_1_expected_prev[22];
	end
	if (
		( GPIO_1_expected_prev[23] !== 1'bx ) && ( GPIO_1_prev[23] !== GPIO_1_expected_prev[23] )
		&& ((GPIO_1_expected_prev[23] !== last_GPIO_1_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[23] = GPIO_1_expected_prev[23];
	end
	if (
		( GPIO_1_expected_prev[24] !== 1'bx ) && ( GPIO_1_prev[24] !== GPIO_1_expected_prev[24] )
		&& ((GPIO_1_expected_prev[24] !== last_GPIO_1_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[24] = GPIO_1_expected_prev[24];
	end
	if (
		( GPIO_1_expected_prev[25] !== 1'bx ) && ( GPIO_1_prev[25] !== GPIO_1_expected_prev[25] )
		&& ((GPIO_1_expected_prev[25] !== last_GPIO_1_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[25] = GPIO_1_expected_prev[25];
	end
	if (
		( GPIO_1_expected_prev[26] !== 1'bx ) && ( GPIO_1_prev[26] !== GPIO_1_expected_prev[26] )
		&& ((GPIO_1_expected_prev[26] !== last_GPIO_1_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[26] = GPIO_1_expected_prev[26];
	end
	if (
		( GPIO_1_expected_prev[27] !== 1'bx ) && ( GPIO_1_prev[27] !== GPIO_1_expected_prev[27] )
		&& ((GPIO_1_expected_prev[27] !== last_GPIO_1_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[27] = GPIO_1_expected_prev[27];
	end
	if (
		( GPIO_1_expected_prev[28] !== 1'bx ) && ( GPIO_1_prev[28] !== GPIO_1_expected_prev[28] )
		&& ((GPIO_1_expected_prev[28] !== last_GPIO_1_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[28] = GPIO_1_expected_prev[28];
	end
	if (
		( GPIO_1_expected_prev[29] !== 1'bx ) && ( GPIO_1_prev[29] !== GPIO_1_expected_prev[29] )
		&& ((GPIO_1_expected_prev[29] !== last_GPIO_1_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[29] = GPIO_1_expected_prev[29];
	end
	if (
		( GPIO_1_expected_prev[30] !== 1'bx ) && ( GPIO_1_prev[30] !== GPIO_1_expected_prev[30] )
		&& ((GPIO_1_expected_prev[30] !== last_GPIO_1_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[30] = GPIO_1_expected_prev[30];
	end
	if (
		( GPIO_1_expected_prev[31] !== 1'bx ) && ( GPIO_1_prev[31] !== GPIO_1_expected_prev[31] )
		&& ((GPIO_1_expected_prev[31] !== last_GPIO_1_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[31] = GPIO_1_expected_prev[31];
	end
	if (
		( GPIO_1_expected_prev[32] !== 1'bx ) && ( GPIO_1_prev[32] !== GPIO_1_expected_prev[32] )
		&& ((GPIO_1_expected_prev[32] !== last_GPIO_1_exp[32]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[32] = GPIO_1_expected_prev[32];
	end
	if (
		( GPIO_1_expected_prev[33] !== 1'bx ) && ( GPIO_1_prev[33] !== GPIO_1_expected_prev[33] )
		&& ((GPIO_1_expected_prev[33] !== last_GPIO_1_exp[33]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[33] = GPIO_1_expected_prev[33];
	end
	if (
		( GPIO_1_expected_prev[34] !== 1'bx ) && ( GPIO_1_prev[34] !== GPIO_1_expected_prev[34] )
		&& ((GPIO_1_expected_prev[34] !== last_GPIO_1_exp[34]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[34] = GPIO_1_expected_prev[34];
	end
	if (
		( GPIO_1_expected_prev[35] !== 1'bx ) && ( GPIO_1_prev[35] !== GPIO_1_expected_prev[35] )
		&& ((GPIO_1_expected_prev[35] !== last_GPIO_1_exp[35]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[35] = GPIO_1_expected_prev[35];
	end
	if (
		( HEX0_expected_prev[0] !== 1'bx ) && ( HEX0_prev[0] !== HEX0_expected_prev[0] )
		&& ((HEX0_expected_prev[0] !== last_HEX0_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX0_exp[0] = HEX0_expected_prev[0];
	end
	if (
		( HEX0_expected_prev[1] !== 1'bx ) && ( HEX0_prev[1] !== HEX0_expected_prev[1] )
		&& ((HEX0_expected_prev[1] !== last_HEX0_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX0_exp[1] = HEX0_expected_prev[1];
	end
	if (
		( HEX0_expected_prev[2] !== 1'bx ) && ( HEX0_prev[2] !== HEX0_expected_prev[2] )
		&& ((HEX0_expected_prev[2] !== last_HEX0_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX0_exp[2] = HEX0_expected_prev[2];
	end
	if (
		( HEX0_expected_prev[3] !== 1'bx ) && ( HEX0_prev[3] !== HEX0_expected_prev[3] )
		&& ((HEX0_expected_prev[3] !== last_HEX0_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX0_exp[3] = HEX0_expected_prev[3];
	end
	if (
		( HEX0_expected_prev[4] !== 1'bx ) && ( HEX0_prev[4] !== HEX0_expected_prev[4] )
		&& ((HEX0_expected_prev[4] !== last_HEX0_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX0_exp[4] = HEX0_expected_prev[4];
	end
	if (
		( HEX0_expected_prev[5] !== 1'bx ) && ( HEX0_prev[5] !== HEX0_expected_prev[5] )
		&& ((HEX0_expected_prev[5] !== last_HEX0_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX0_exp[5] = HEX0_expected_prev[5];
	end
	if (
		( HEX0_expected_prev[6] !== 1'bx ) && ( HEX0_prev[6] !== HEX0_expected_prev[6] )
		&& ((HEX0_expected_prev[6] !== last_HEX0_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX0_exp[6] = HEX0_expected_prev[6];
	end
	if (
		( HEX1_expected_prev[0] !== 1'bx ) && ( HEX1_prev[0] !== HEX1_expected_prev[0] )
		&& ((HEX1_expected_prev[0] !== last_HEX1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX1_exp[0] = HEX1_expected_prev[0];
	end
	if (
		( HEX1_expected_prev[1] !== 1'bx ) && ( HEX1_prev[1] !== HEX1_expected_prev[1] )
		&& ((HEX1_expected_prev[1] !== last_HEX1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX1_exp[1] = HEX1_expected_prev[1];
	end
	if (
		( HEX1_expected_prev[2] !== 1'bx ) && ( HEX1_prev[2] !== HEX1_expected_prev[2] )
		&& ((HEX1_expected_prev[2] !== last_HEX1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX1_exp[2] = HEX1_expected_prev[2];
	end
	if (
		( HEX1_expected_prev[3] !== 1'bx ) && ( HEX1_prev[3] !== HEX1_expected_prev[3] )
		&& ((HEX1_expected_prev[3] !== last_HEX1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX1_exp[3] = HEX1_expected_prev[3];
	end
	if (
		( HEX1_expected_prev[4] !== 1'bx ) && ( HEX1_prev[4] !== HEX1_expected_prev[4] )
		&& ((HEX1_expected_prev[4] !== last_HEX1_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX1_exp[4] = HEX1_expected_prev[4];
	end
	if (
		( HEX1_expected_prev[5] !== 1'bx ) && ( HEX1_prev[5] !== HEX1_expected_prev[5] )
		&& ((HEX1_expected_prev[5] !== last_HEX1_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX1_exp[5] = HEX1_expected_prev[5];
	end
	if (
		( HEX1_expected_prev[6] !== 1'bx ) && ( HEX1_prev[6] !== HEX1_expected_prev[6] )
		&& ((HEX1_expected_prev[6] !== last_HEX1_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX1_exp[6] = HEX1_expected_prev[6];
	end
	if (
		( HEX2_expected_prev[0] !== 1'bx ) && ( HEX2_prev[0] !== HEX2_expected_prev[0] )
		&& ((HEX2_expected_prev[0] !== last_HEX2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX2_exp[0] = HEX2_expected_prev[0];
	end
	if (
		( HEX2_expected_prev[1] !== 1'bx ) && ( HEX2_prev[1] !== HEX2_expected_prev[1] )
		&& ((HEX2_expected_prev[1] !== last_HEX2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX2_exp[1] = HEX2_expected_prev[1];
	end
	if (
		( HEX2_expected_prev[2] !== 1'bx ) && ( HEX2_prev[2] !== HEX2_expected_prev[2] )
		&& ((HEX2_expected_prev[2] !== last_HEX2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX2_exp[2] = HEX2_expected_prev[2];
	end
	if (
		( HEX2_expected_prev[3] !== 1'bx ) && ( HEX2_prev[3] !== HEX2_expected_prev[3] )
		&& ((HEX2_expected_prev[3] !== last_HEX2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX2_exp[3] = HEX2_expected_prev[3];
	end
	if (
		( HEX2_expected_prev[4] !== 1'bx ) && ( HEX2_prev[4] !== HEX2_expected_prev[4] )
		&& ((HEX2_expected_prev[4] !== last_HEX2_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX2_exp[4] = HEX2_expected_prev[4];
	end
	if (
		( HEX2_expected_prev[5] !== 1'bx ) && ( HEX2_prev[5] !== HEX2_expected_prev[5] )
		&& ((HEX2_expected_prev[5] !== last_HEX2_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX2_exp[5] = HEX2_expected_prev[5];
	end
	if (
		( HEX2_expected_prev[6] !== 1'bx ) && ( HEX2_prev[6] !== HEX2_expected_prev[6] )
		&& ((HEX2_expected_prev[6] !== last_HEX2_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX2_exp[6] = HEX2_expected_prev[6];
	end
	if (
		( HEX4_expected_prev[0] !== 1'bx ) && ( HEX4_prev[0] !== HEX4_expected_prev[0] )
		&& ((HEX4_expected_prev[0] !== last_HEX4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX4_exp[0] = HEX4_expected_prev[0];
	end
	if (
		( HEX4_expected_prev[1] !== 1'bx ) && ( HEX4_prev[1] !== HEX4_expected_prev[1] )
		&& ((HEX4_expected_prev[1] !== last_HEX4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX4_exp[1] = HEX4_expected_prev[1];
	end
	if (
		( HEX4_expected_prev[2] !== 1'bx ) && ( HEX4_prev[2] !== HEX4_expected_prev[2] )
		&& ((HEX4_expected_prev[2] !== last_HEX4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX4_exp[2] = HEX4_expected_prev[2];
	end
	if (
		( HEX4_expected_prev[3] !== 1'bx ) && ( HEX4_prev[3] !== HEX4_expected_prev[3] )
		&& ((HEX4_expected_prev[3] !== last_HEX4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX4_exp[3] = HEX4_expected_prev[3];
	end
	if (
		( HEX4_expected_prev[4] !== 1'bx ) && ( HEX4_prev[4] !== HEX4_expected_prev[4] )
		&& ((HEX4_expected_prev[4] !== last_HEX4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX4_exp[4] = HEX4_expected_prev[4];
	end
	if (
		( HEX4_expected_prev[5] !== 1'bx ) && ( HEX4_prev[5] !== HEX4_expected_prev[5] )
		&& ((HEX4_expected_prev[5] !== last_HEX4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX4_exp[5] = HEX4_expected_prev[5];
	end
	if (
		( HEX4_expected_prev[6] !== 1'bx ) && ( HEX4_prev[6] !== HEX4_expected_prev[6] )
		&& ((HEX4_expected_prev[6] !== last_HEX4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX4_exp[6] = HEX4_expected_prev[6];
	end
	if (
		( HEX6_expected_prev[0] !== 1'bx ) && ( HEX6_prev[0] !== HEX6_expected_prev[0] )
		&& ((HEX6_expected_prev[0] !== last_HEX6_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX6_exp[0] = HEX6_expected_prev[0];
	end
	if (
		( HEX6_expected_prev[1] !== 1'bx ) && ( HEX6_prev[1] !== HEX6_expected_prev[1] )
		&& ((HEX6_expected_prev[1] !== last_HEX6_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX6_exp[1] = HEX6_expected_prev[1];
	end
	if (
		( HEX6_expected_prev[2] !== 1'bx ) && ( HEX6_prev[2] !== HEX6_expected_prev[2] )
		&& ((HEX6_expected_prev[2] !== last_HEX6_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX6_exp[2] = HEX6_expected_prev[2];
	end
	if (
		( HEX6_expected_prev[3] !== 1'bx ) && ( HEX6_prev[3] !== HEX6_expected_prev[3] )
		&& ((HEX6_expected_prev[3] !== last_HEX6_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX6_exp[3] = HEX6_expected_prev[3];
	end
	if (
		( HEX6_expected_prev[4] !== 1'bx ) && ( HEX6_prev[4] !== HEX6_expected_prev[4] )
		&& ((HEX6_expected_prev[4] !== last_HEX6_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX6_exp[4] = HEX6_expected_prev[4];
	end
	if (
		( HEX6_expected_prev[5] !== 1'bx ) && ( HEX6_prev[5] !== HEX6_expected_prev[5] )
		&& ((HEX6_expected_prev[5] !== last_HEX6_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX6_exp[5] = HEX6_expected_prev[5];
	end
	if (
		( HEX6_expected_prev[6] !== 1'bx ) && ( HEX6_prev[6] !== HEX6_expected_prev[6] )
		&& ((HEX6_expected_prev[6] !== last_HEX6_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX6_exp[6] = HEX6_expected_prev[6];
	end
	if (
		( LEDG_expected_prev[0] !== 1'bx ) && ( LEDG_prev[0] !== LEDG_expected_prev[0] )
		&& ((LEDG_expected_prev[0] !== last_LEDG_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LEDG_exp[0] = LEDG_expected_prev[0];
	end
	if (
		( LEDG_expected_prev[1] !== 1'bx ) && ( LEDG_prev[1] !== LEDG_expected_prev[1] )
		&& ((LEDG_expected_prev[1] !== last_LEDG_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LEDG_exp[1] = LEDG_expected_prev[1];
	end
	if (
		( LEDG_expected_prev[2] !== 1'bx ) && ( LEDG_prev[2] !== LEDG_expected_prev[2] )
		&& ((LEDG_expected_prev[2] !== last_LEDG_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LEDG_exp[2] = LEDG_expected_prev[2];
	end
	if (
		( LEDG_expected_prev[3] !== 1'bx ) && ( LEDG_prev[3] !== LEDG_expected_prev[3] )
		&& ((LEDG_expected_prev[3] !== last_LEDG_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LEDG_exp[3] = LEDG_expected_prev[3];
	end
	if (
		( LEDG_expected_prev[4] !== 1'bx ) && ( LEDG_prev[4] !== LEDG_expected_prev[4] )
		&& ((LEDG_expected_prev[4] !== last_LEDG_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LEDG_exp[4] = LEDG_expected_prev[4];
	end
	if (
		( LEDG_expected_prev[5] !== 1'bx ) && ( LEDG_prev[5] !== LEDG_expected_prev[5] )
		&& ((LEDG_expected_prev[5] !== last_LEDG_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LEDG_exp[5] = LEDG_expected_prev[5];
	end
	if (
		( LEDG_expected_prev[6] !== 1'bx ) && ( LEDG_prev[6] !== LEDG_expected_prev[6] )
		&& ((LEDG_expected_prev[6] !== last_LEDG_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LEDG_exp[6] = LEDG_expected_prev[6];
	end
	if (
		( LEDG_expected_prev[7] !== 1'bx ) && ( LEDG_prev[7] !== LEDG_expected_prev[7] )
		&& ((LEDG_expected_prev[7] !== last_LEDG_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LEDG_exp[7] = LEDG_expected_prev[7];
	end
	if (
		( LEDG_expected_prev[8] !== 1'bx ) && ( LEDG_prev[8] !== LEDG_expected_prev[8] )
		&& ((LEDG_expected_prev[8] !== last_LEDG_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LEDG_exp[8] = LEDG_expected_prev[8];
	end
	if (
		( LEDR_expected_prev[0] !== 1'bx ) && ( LEDR_prev[0] !== LEDR_expected_prev[0] )
		&& ((LEDR_expected_prev[0] !== last_LEDR_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[0] = LEDR_expected_prev[0];
	end
	if (
		( LEDR_expected_prev[1] !== 1'bx ) && ( LEDR_prev[1] !== LEDR_expected_prev[1] )
		&& ((LEDR_expected_prev[1] !== last_LEDR_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[1] = LEDR_expected_prev[1];
	end
	if (
		( LEDR_expected_prev[2] !== 1'bx ) && ( LEDR_prev[2] !== LEDR_expected_prev[2] )
		&& ((LEDR_expected_prev[2] !== last_LEDR_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[2] = LEDR_expected_prev[2];
	end
	if (
		( LEDR_expected_prev[3] !== 1'bx ) && ( LEDR_prev[3] !== LEDR_expected_prev[3] )
		&& ((LEDR_expected_prev[3] !== last_LEDR_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[3] = LEDR_expected_prev[3];
	end
	if (
		( LEDR_expected_prev[4] !== 1'bx ) && ( LEDR_prev[4] !== LEDR_expected_prev[4] )
		&& ((LEDR_expected_prev[4] !== last_LEDR_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[4] = LEDR_expected_prev[4];
	end
	if (
		( LEDR_expected_prev[5] !== 1'bx ) && ( LEDR_prev[5] !== LEDR_expected_prev[5] )
		&& ((LEDR_expected_prev[5] !== last_LEDR_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[5] = LEDR_expected_prev[5];
	end
	if (
		( LEDR_expected_prev[6] !== 1'bx ) && ( LEDR_prev[6] !== LEDR_expected_prev[6] )
		&& ((LEDR_expected_prev[6] !== last_LEDR_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[6] = LEDR_expected_prev[6];
	end
	if (
		( LEDR_expected_prev[7] !== 1'bx ) && ( LEDR_prev[7] !== LEDR_expected_prev[7] )
		&& ((LEDR_expected_prev[7] !== last_LEDR_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[7] = LEDR_expected_prev[7];
	end
	if (
		( LEDR_expected_prev[8] !== 1'bx ) && ( LEDR_prev[8] !== LEDR_expected_prev[8] )
		&& ((LEDR_expected_prev[8] !== last_LEDR_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[8] = LEDR_expected_prev[8];
	end
	if (
		( LEDR_expected_prev[9] !== 1'bx ) && ( LEDR_prev[9] !== LEDR_expected_prev[9] )
		&& ((LEDR_expected_prev[9] !== last_LEDR_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[9] = LEDR_expected_prev[9];
	end
	if (
		( LEDR_expected_prev[10] !== 1'bx ) && ( LEDR_prev[10] !== LEDR_expected_prev[10] )
		&& ((LEDR_expected_prev[10] !== last_LEDR_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[10] = LEDR_expected_prev[10];
	end
	if (
		( LEDR_expected_prev[11] !== 1'bx ) && ( LEDR_prev[11] !== LEDR_expected_prev[11] )
		&& ((LEDR_expected_prev[11] !== last_LEDR_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[11] = LEDR_expected_prev[11];
	end
	if (
		( LEDR_expected_prev[12] !== 1'bx ) && ( LEDR_prev[12] !== LEDR_expected_prev[12] )
		&& ((LEDR_expected_prev[12] !== last_LEDR_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[12] = LEDR_expected_prev[12];
	end
	if (
		( LEDR_expected_prev[13] !== 1'bx ) && ( LEDR_prev[13] !== LEDR_expected_prev[13] )
		&& ((LEDR_expected_prev[13] !== last_LEDR_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[13] = LEDR_expected_prev[13];
	end
	if (
		( LEDR_expected_prev[14] !== 1'bx ) && ( LEDR_prev[14] !== LEDR_expected_prev[14] )
		&& ((LEDR_expected_prev[14] !== last_LEDR_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[14] = LEDR_expected_prev[14];
	end
	if (
		( LEDR_expected_prev[15] !== 1'bx ) && ( LEDR_prev[15] !== LEDR_expected_prev[15] )
		&& ((LEDR_expected_prev[15] !== last_LEDR_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[15] = LEDR_expected_prev[15];
	end
	if (
		( LEDR_expected_prev[16] !== 1'bx ) && ( LEDR_prev[16] !== LEDR_expected_prev[16] )
		&& ((LEDR_expected_prev[16] !== last_LEDR_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[16] = LEDR_expected_prev[16];
	end
	if (
		( LEDR_expected_prev[17] !== 1'bx ) && ( LEDR_prev[17] !== LEDR_expected_prev[17] )
		&& ((LEDR_expected_prev[17] !== last_LEDR_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[17] = LEDR_expected_prev[17];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Calculadore_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg [35:0] treg_GPIO_1;
reg [0:0] SW;
// wires                                               
wire [35:0] GPIO_1;
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX4;
wire [6:0] HEX6;
wire [8:0] LEDG;
wire [17:0] LEDR;

wire sampler;                             

// assign statements (if any)                          
assign GPIO_1 = treg_GPIO_1;
Calculadore i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.GPIO_1(GPIO_1),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX4(HEX4),
	.HEX6(HEX6),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.SW(SW)
);

// CLOCK_50
initial
begin
	CLOCK_50 = 1'b0;
end 
// GPIO_1[ 35 ]
initial
begin
	treg_GPIO_1[35] = 1'b0;
end 
// GPIO_1[ 34 ]
initial
begin
	treg_GPIO_1[34] = 1'b0;
end 
// GPIO_1[ 33 ]
initial
begin
	treg_GPIO_1[33] = 1'b0;
end 
// GPIO_1[ 32 ]
initial
begin
	treg_GPIO_1[32] = 1'b0;
end 
// GPIO_1[ 31 ]
initial
begin
	treg_GPIO_1[31] = 1'b0;
end 
// GPIO_1[ 30 ]
initial
begin
	treg_GPIO_1[30] = 1'b0;
end 
// GPIO_1[ 29 ]
initial
begin
	treg_GPIO_1[29] = 1'b0;
end 
// GPIO_1[ 28 ]
initial
begin
	treg_GPIO_1[28] = 1'b0;
end 
// GPIO_1[ 27 ]
initial
begin
	treg_GPIO_1[27] = 1'b0;
end 
// GPIO_1[ 26 ]
initial
begin
	treg_GPIO_1[26] = 1'b0;
end 
// GPIO_1[ 25 ]
initial
begin
	treg_GPIO_1[25] = 1'b1;
	treg_GPIO_1[25] = #60000 1'b0;
end 
// GPIO_1[ 24 ]
initial
begin
	treg_GPIO_1[24] = 1'b0;
end 
// GPIO_1[ 23 ]
initial
begin
	treg_GPIO_1[23] = 1'b0;
end 
// GPIO_1[ 22 ]
initial
begin
	treg_GPIO_1[22] = 1'b0;
end 
// GPIO_1[ 21 ]
initial
begin
	treg_GPIO_1[21] = 1'b0;
end 
// GPIO_1[ 20 ]
initial
begin
	treg_GPIO_1[20] = 1'b0;
end 
// GPIO_1[ 19 ]
initial
begin
	treg_GPIO_1[19] = 1'b0;
end 
// GPIO_1[ 18 ]
initial
begin
	treg_GPIO_1[18] = 1'b0;
end 
// GPIO_1[ 17 ]
initial
begin
	treg_GPIO_1[17] = 1'b0;
end 
// GPIO_1[ 16 ]
initial
begin
	treg_GPIO_1[16] = 1'b0;
end 
// GPIO_1[ 15 ]
initial
begin
	treg_GPIO_1[15] = 1'b0;
end 
// GPIO_1[ 14 ]
initial
begin
	treg_GPIO_1[14] = 1'b0;
end 
// GPIO_1[ 13 ]
initial
begin
	treg_GPIO_1[13] = 1'b0;
end 
// GPIO_1[ 12 ]
initial
begin
	treg_GPIO_1[12] = 1'b0;
end 
// GPIO_1[ 11 ]
initial
begin
	treg_GPIO_1[11] = 1'b1;
	treg_GPIO_1[11] = #60000 1'b0;
end 
// GPIO_1[ 10 ]
initial
begin
	treg_GPIO_1[10] = 1'b0;
end 
// GPIO_1[ 9 ]
initial
begin
	treg_GPIO_1[9] = 1'b0;
end 
// GPIO_1[ 8 ]
initial
begin
	treg_GPIO_1[8] = 1'b0;
end 
// GPIO_1[ 7 ]
initial
begin
	treg_GPIO_1[7] = 1'b0;
end 
// GPIO_1[ 6 ]
initial
begin
	treg_GPIO_1[6] = 1'b0;
end 
// GPIO_1[ 5 ]
initial
begin
	treg_GPIO_1[5] = 1'b0;
end 
// GPIO_1[ 4 ]
initial
begin
	treg_GPIO_1[4] = 1'b0;
end 
// GPIO_1[ 3 ]
initial
begin
	treg_GPIO_1[3] = 1'b0;
end 
// GPIO_1[ 2 ]
initial
begin
	treg_GPIO_1[2] = 1'b0;
end 
// GPIO_1[ 1 ]
initial
begin
	treg_GPIO_1[1] = 1'b0;
end 
// GPIO_1[ 0 ]
initial
begin
	treg_GPIO_1[0] = 1'b0;
end 

// SW
initial
begin
	SW[0] = 1'b0;
end 

// SW[0]
initial
begin
	SW[0] = 1'b0;
end 

Calculadore_vlg_sample_tst tb_sample (
	.CLOCK_50(CLOCK_50),
	.GPIO_1(GPIO_1),
	.SW(SW),
	.sampler_tx(sampler)
);

Calculadore_vlg_check_tst tb_out(
	.GPIO_1(GPIO_1),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX4(HEX4),
	.HEX6(HEX6),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.sampler_rx(sampler)
);
endmodule

